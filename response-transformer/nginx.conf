# define upstream servers
upstream backend {
    server backend1:8080;
    server backend2:8080;
}

# configure the API endpoint
server {
    listen 80;
    server_name api.example.com;

    location / {
        # proxy the request to the upstream servers
        proxy_pass http://backend;

        # intercept the response and send it to the response transformation microservice
        proxy_set_header X-Response-Transform true;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        # configure the response transformation microservice
        if ($http_x_response_transform) {
            set $backend_url http://response-transform:8080;
            proxy_pass $backend_url$request_uri;
        }
    }
}

# configure the response transformation microservice
server {
    listen 8080;
    server_name response-transform;

    location / {
        # transform the response
        # you can use any language or tool to implement the transformation logic here
        # for example, you can use Python and Flask to create a simple transformation service
        # the example below assumes that the response is in JSON format and transforms it into XML
        add_header Content-Type 'application/xml';
        return 200 '<?xml version="1.0" encoding="UTF-8"?><data><message>Hello World</message></data>';
    }
}
